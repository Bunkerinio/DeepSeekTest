import fitz  # PyMuPDF
import csv
import chardet
import os
import stat
from difflib import unified_diff


def detect_encoding(file_path):
    with open(file_path, 'rb') as f:
        return chardet.detect(f.read())['encoding']


def clean_value(value):
    """Конвертирует строку в число, заменяя запятые на точки и удаляя пробелы"""
    if not value:
        return 0.0

    # Удаляем все пробелы и заменяем запятые на точки
    value_clean = str(value).strip().replace(" ", "").replace(",", ".")

    try:
        return float(value_clean)
    except ValueError:
        print(f"⚠️ Некорректное значение: '{value}'. Используется 0.0")
        return 0.0


def find_table_coordinates(pdf_path, start_marker="StartSample"):
    """Находит координаты таблицы на всех страницах"""
    doc = fitz.open(pdf_path)
    table_coords = None
    footer_coords = None
    table_pages = []  # Хранит номера страниц с таблицей

    for page_num, page in enumerate(doc):
        spans_by_y = {}
        for block in page.get_text("dict")["blocks"]:
            if "lines" not in block:
                continue
            for line in block["lines"]:
                for span in line["spans"]:
                    y = round(span["bbox"][1], 1)
                    if y not in spans_by_y:
                        spans_by_y[y] = []
                    spans_by_y[y].append(span)

        for y, spans in sorted(spans_by_y.items()):
            line_text = "".join(span["text"] for span in spans)

            # Поиск начала таблицы
            if not table_coords and start_marker in line_text:
                spans_sorted = sorted(spans, key=lambda s: s["bbox"][0])
                if len(spans_sorted) >= 3:
                    table_coords = {
                        "page_num": page_num,
                        "x1": spans_sorted[0]["bbox"][0],
                        "x2": spans_sorted[1]["bbox"][2],
                        "x3": spans_sorted[2]["bbox"][2],
                        "start_y": y,
                        "font": spans_sorted[0]["font"],
                        "size": spans_sorted[0]["size"],
                        "color": spans_sorted[0]["color"],
                        "spans": spans_sorted
                    }
                    table_pages.append(page_num)
                    continue

            # Если таблица уже найдена, проверяем продолжение
            if table_coords and page_num >= table_coords["page_num"]:
                # Проверяем структуру строк (аналогична началу таблицы)
                if len(spans) >= 3 and all(s["font"] == table_coords["font"] for s in spans):
                    table_pages.append(page_num)

            # Поиск футера (прерывает таблицу)
            if "Results Flags Legend" in line_text:
                footer_coords = {
                    "page_num": page_num,
                    "bbox": fitz.Rect(0, y, page.rect.width, page.rect.height)
                }
                break

    doc.close()
    table_pages = list(set(table_pages))
    return table_coords, footer_coords, table_pages  # Теперь возвращаем и номера страниц


def extract_table_from_pdf(pdf_path, table_coords, table_pages):
    """Извлекает таблицу со всех указанных страниц"""
    if not table_coords or not table_pages:
        return None
    doc = fitz.open(pdf_path)
    table_data = []

    for page_num in table_pages:
        page = doc[page_num]
        spans_by_y = {}

        # Анализ текущей страницы
        for block in page.get_text("dict")["blocks"]:
            if "lines" not in block:
                continue
            for line in block["lines"]:
                for span in line["spans"]:
                    # print("span", span)
                    y = round(span["bbox"][1], 1)
                    if y not in spans_by_y:
                        spans_by_y[y] = []
                    spans_by_y[y].append(span)

        # Обработка строк
        for y in sorted(k for k in spans_by_y.keys() if
                        k >= (table_coords["start_y"] if page_num == table_coords["page_num"] else 0)):
            spans = sorted(spans_by_y[y], key=lambda s: s["bbox"][0])
            row = {"col1": "", "col2": "", "col3": "", "y": y, "spans": spans, "page": page_num}

            for span in spans:
                if span["bbox"][0] <= table_coords["x1"] + 5:
                    row["col1"] = span["text"].strip()
                elif span["bbox"][2] <= table_coords["x2"] + 5:
                    row["col2"] = span["text"].strip()
                elif span["bbox"][2] <= table_coords["x3"] + 5:
                    row["col3"] = span["text"].strip()

            if row["col1"] or row["col2"] or row["col3"]:
                if row["col1"]=="" or row["col2"]=="" or row["col3"]=="":
                    pass
                else:
                    table_data.append(row)
    # for i in table_data:
    #     print(i)
    doc.close()
    return table_data


def extract_table_from_csv(csv_path, encoding, first_sample_name):
    """Извлекает данные из CSV с учетом запятых как десятичных разделителей"""
    csv_data = []
    found_start = False

    with open(csv_path, mode='r', encoding=encoding) as csv_file:
        csv_reader = csv.reader(csv_file)

        for row in csv_reader:
            if not row:  # Пропускаем пустые строки
                continue

            # Ищем стартовый маркер
            if not found_start:
                if row[0].strip() == first_sample_name:
                    found_start = True
                else:
                    continue

            # Обрабатываем только строки с 3+ колонками
            if len(row) >= 3:
                try:
                    # print("csv_row", row)
                    sample = row[0].strip()
                    conc = clean_value(row[1])
                    reading = clean_value(row[3])
                    csv_data.append((sample, conc, reading))
                except Exception as e:
                    print(f"Ошибка обработки строки {row}: {str(e)}")
    # print("csv_data", csv_data)
    return csv_data


def edit_pdf_from_csv(
    input_pdf_path: str,
    output_pdf_path: str,
    csv_data_path: str,
    font_otf_path: str = None,  # Новый параметр для пути к OTF-шрифту
    pdf_first_sample: str = "StartSample",
    csv_first_sample: str = "Blank_1",
    align_sample: str = "left",
    align_conc: str = "right",
    align_reading: str = "right",
):


    # Загрузка шрифта (добавить в начало функции)
    font_buffer = None
    if font_otf_path:
        try:
            with open(font_otf_path, "rb") as f:
                font_buffer = f.read()
            print(f"✅ Шрифт {font_otf_path} успешно загружен")
        except Exception as e:
            print(f"⚠️ Ошибка загрузки шрифта: {e}. Будет использован системный шрифт")

    # Определяем кодировку CSV
    encoding = detect_encoding(csv_data_path)
    print(f"Определена кодировка CSV: {encoding}")

    # Находим координаты таблицы и футера
    table_coords, footer_coords, table_pages = find_table_coordinates(input_pdf_path, pdf_first_sample)
    if not table_coords:
        print(f"Ошибка: не найден маркер '{pdf_first_sample}' в PDF")
        return

    print(f"\nКоординаты таблицы:")
    print(f"Страница: {table_coords['page_num']}")
    print(f"X1 (начало 1 столбца): {table_coords['x1']:.2f}")
    print(f"X2 (конец 2 столбца): {table_coords['x2']:.2f}")
    print(f"X3 (конец 3 столбца): {table_coords['x3']:.2f}")
    print(f"Шрифт: {table_coords['font']}")
    print(f"Размер шрифта: {table_coords['size']}")
    print(f"Цвет шрифта: {table_coords['color']}")


    # if footer_coords:
    #     print(f"\nНайден футер на странице {footer_coords['page_num']}:")
    #     print(footer_text)
    # else:
    #     print("\nФутер не найден")

    # Извлекаем данные из CSV
    csv_data = extract_table_from_csv(csv_data_path, detect_encoding(csv_data_path), csv_first_sample)
    if not csv_data:
        print(f"Ошибка: не удалось загрузить данные из CSV")
        return

    print(f"\nНайдено {len(csv_data)} строк в CSV")
    print("Первые 5 строк CSV:")
    for i, row in enumerate(csv_data[:5]):
        print(f"{i + 1}: {row[0]:20} {row[1]:>10} {row[2]:>10}")

    # Извлекаем таблицу из PDF
    pdf_table = extract_table_from_pdf(input_pdf_path, table_coords, table_pages)
    # print("pdf_table[0]", pdf_table[0])
    # print("pdf_table[-1]", pdf_table[-1])
    if not pdf_table:
        print("\nОшибка: не удалось извлечь таблицу из PDF")
        return

    print(f"\nНайдено {len(pdf_table)} строк в PDF таблице")
    print("Первые 5 строк PDF:")
    for i, row in enumerate(pdf_table[:5]):
        print(f"{i + 1}: {row['col1']:20} {row['col2']:>10} {row['col3']:>10}")

    # Проверяем соответствие количества строк
    if len(csv_data) != len(pdf_table):
        print(f"\nВнимание: количество строк в CSV ({len(csv_data)}) и PDF ({len(pdf_table)}) не совпадает")

    # Открываем PDF для редактирования
    doc = fitz.open(input_pdf_path)
    csv_index = 0

    for row in pdf_table:
        if csv_index >= len(csv_data):
            break
        try:
            page = doc[row["page"]]  # Получаем нужную страницу
            csv_row = csv_data[csv_index]

            # Форматирование текста
            sample_text = csv_row[0].ljust(23) if align_sample == "left" else csv_row[0].rjust(23)
            conc_text = f"{float(csv_row[1]):.2f}".rjust(10)
            reading_text = f"{float(csv_row[2]):.4f}".rjust(12)
            full_text = f"{sample_text} {conc_text} {reading_text}"
            # print("Форматирование успешно")

            # Координаты замены
            x0 = min(span["bbox"][0] for span in row["spans"])
            y0 = row["y"]+8
            x1 = max(span["bbox"][2] for span in row["spans"])
            y1 = max(span["bbox"][3] for span in row["spans"])

            # Удаление старого текста
            page.add_redact_annot(fitz.Rect(x0, y0, x0 + 400, y0 + 20))
            page.apply_redactions()
            page.insert_font(fontname="otf", fontbuffer=font_buffer)
            # print("Удаление старого текста успешно")

            # Варианты вставки в зависимости от доступности шрифта
            if font_buffer:
                # Вариант 1: С кастомным OTF-шрифтом
                page.insert_text(
                    (x0, y0 + 1),
                    full_text,
                    fontname="otf",  # Произвольное имя
                    fontsize=table_coords['size'],
                    # fontbuffer=font_buffer,  # Главное - передаем буфер
                    color=table_coords['color'],
                    rotate=0
                )
                # print("Кастомный шрифт")
            else:
                # Вариант 2: С системным шрифтом
                page.insert_text(
                    (x0, y0 + 1),
                    full_text,
                    fontname=table_coords.get("font", "Courier-New"),
                    fontsize=table_coords.get("size", 11)
                )
            csv_index += 1

        except Exception as e:
            print(f"Ошибка обработки строки {csv_index + 1}: {e}")
            continue

    # Выделение футера (если найден)
    if footer_coords:
        try:
            page = doc[footer_coords["page_num"]]
            annot = page.add_highlight_annot(footer_coords["bbox"])
            annot.set_colors(stroke=(1, 1, 0))  # Желтый цвет
        except Exception as e:
            print(f"Ошибка выделения футера: {e}")

    # Сохраняем изменения
    doc.save(output_pdf_path, garbage=4, deflate=True, encryption=fitz.PDF_ENCRYPT_KEEP, permissions=fitz.PDF_PERM_ACCESSIBILITY)
    doc.close()
    print(f"Готово! Отредактировано {csv_index} строк.")

    if os.path.exists(output_pdf_path):
        os.chmod(output_pdf_path, stat.S_IREAD
                 | stat.S_IRGRP
                 | stat.S_IROTH
                 )

    print("\nИтог:")
    print(f"Всего строк в CSV: {len(csv_data)}")
    print(f"Сохранено в: {output_pdf_path}")

    # Проверка результатов (используем маркер из CSV)
    # print("\nПроверка координат в модифицированном файле:")
    # verify_pdf(output_pdf_path, csv_first_sample)


def verify_pdf(pdf_path, start_marker):
    """Проверяет координаты в модифицированном PDF"""
    doc = fitz.open(pdf_path)
    table_coords, _, _ = find_table_coordinates(pdf_path, start_marker)

    if not table_coords:
        print("Не удалось проверить координаты - маркер не найден")
        return

    print(f"Проверка координат X1, X2, X3:")
    print(f"Ожидаемые X1: {table_coords['x1']:.2f}")
    print(f"Ожидаемые X2: {table_coords['x2']:.2f}")
    print(f"Ожидаемые X3: {table_coords['x3']:.2f}")

    # Проверяем первую строку таблицы
    page = doc[table_coords["page_num"]]
    spans_by_y = {}
    for block in page.get_text("dict")["blocks"]:
        if "lines" not in block:
            continue
        for line in block["lines"]:
            for span in line["spans"]:
                y = round(span["bbox"][1], 1)
                if y not in spans_by_y:
                    spans_by_y[y] = []
                spans_by_y[y].append(span)

    # Находим spans для первой строки таблицы
    spans = []
    for y in sorted(spans_by_y.keys()):
        if y >= table_coords["start_y"]:
            spans = spans_by_y[y]
            break

    if len(spans) >= 3:
        spans_sorted = sorted(spans, key=lambda s: s["bbox"][0])
        print("\nФактические координаты в модифицированном файле:")
        print(f"X1 (первый столбец): {spans_sorted[0]['bbox'][0]:.2f}")
        print(f"X2 (второй столбец): {spans_sorted[1]['bbox'][2]:.2f}")
        print(f"X3 (третий столбец): {spans_sorted[2]['bbox'][2]:.2f}")
    else:
        print("\nНе удалось проверить координаты столбцов")

    doc.close()



# Пример использования

edit_pdf_from_csv(
    input_pdf_path=r"C:\Users\Admin\Desktop\PythonProjects\PDFCaryUVEditor\TestFiles\Concentration.pdf",
    output_pdf_path=r"C:\Users\Admin\Desktop\PythonProjects\PDFCaryUVEditor\TestFiles\Concentration_modified.pdf",
    csv_data_path=r"C:\Users\Admin\Desktop\PythonProjects\PDFCaryUVEditor\TestFiles\DM1.csv",
    pdf_first_sample="StartSample",  # Имя первого образца в PDF
    csv_first_sample="Blank_1",  # Имя первого образца в CSV
    align_sample="left",
    align_conc="right",
    align_reading="right",
    font_otf_path=r"C:\Users\Admin\Desktop\PythonProjects\PDFCaryUVEditor\cour.ttf"
)


# def check_font(font_path):
#     try:
#         with open(font_path, "rb") as f:
#             if f.read(4) == b"OTTO":
#                 return True
#         return False
#     except:
#         return False
